import edk_sar as es
import glob
import os


def generate_run_files():
    run_files_cmd = [
        "bash",
        "/workspace/workflows/interferograms/generate_run_files.sh",
    ]
    es.frameworks.isce2.run_cmd(" ".join(run_files_cmd))


def execute_run_files():
    es.frameworks.isce2.run_cmd(
        "bash /workspace/workflows/interferograms/execute_run_files.sh"
    )


# TODO: Write function which creates a displacement.vrt from unwrapped interferograms

# TODO: Write function which creates a phase.vrt from wrapped interferograms

def run(slc_path):
    es.workflows.base.create_netrc()
    es.workflows.base.create_folders()
    
    es.workflows.base.copy_slcs(slc_path)

    es.workflows.base.get_aux_file()
    
    slcs = glob.glob(os.path.join(slc_path, "*.zip"))
    common_bbox = es.workflows.base.get_common_bbox(slcs)
    es.workflows.base.download_dem(common_bbox)


    generate_run_files()

    execute_run_files()

    # create_displacement()
    # We also create displacement.vrt which is the final output of interferograms workflow.
    # The function to do this will be written in this file
    
    # create_phase()
    # We also create phase.vrt
    

    # After executing all this we get few important files 
    # coherence, unwrapped interferograms, wrapped interferograms -- These are most important
    # displacement, phase --  These are generated by us
    # We also get few other files related to unfiltered coherence and interferograms and connected component

    # We geocode the most important files - coherence, unwrapped interferograms, wrapped interferograms, phase and displacement
    # helpers.geocode(). Call this multiple times to geocode important files

# TODO: Write function which returns the output file paths after interfergram runs. 
# This will return geocoded file paths of outputs which users can directly start using either via GDAL, xarray or edk-sar
# def outputs():